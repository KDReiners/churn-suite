name: Documentation Staleness Check

on:
  schedule:
    - cron: '0 6 1 * *'
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run staleness check
        id: stale
        run: |
          python3 - <<'PY'
          import os, re, datetime
          from pathlib import Path

          # Collect README.md files (root + modules, including submodules)
          include = []
          for root, dirs, files in os.walk('.'):
              if '.git' in root.split(os.sep):
                  continue
              for f in files:
                  if f.lower() == 'readme.md':
                      include.append(Path(root) / f)

          today = datetime.date.today()
          report = []

          def parse_date(line: str):
              m = re.search(r'(\d{4}-\d{2}-\d{2})', line)
              if not m:
                  return None
              try:
                  return datetime.date.fromisoformat(m.group(1))
              except Exception:
                  return None

          for p in sorted(include):
              try:
                  text = (p.read_text(encoding='utf-8', errors='ignore')).splitlines()
              except Exception:
                  text = []
              found = None
              for ln in text[:10]:
                  if ('Last reviewed' in ln) or ('Last Reviewed' in ln) or ('Last updated' in ln) or ('Last Updated' in ln):
                      d = parse_date(ln)
                      if d:
                          found = d
                          break
              status = 'missing'
              age = None
              if found:
                  age = (today - found).days
                  status = 'ok' if age is not None and age <= 30 else 'stale'
              report.append({
                  'file': str(p),
                  'date': found.isoformat() if found else None,
                  'age_days': age,
                  'status': status,
              })

          lines = ['# Documentation Staleness Report', f'Date: {today.isoformat()}', '']
          if not report:
              lines.append('No README.md files found.')
          else:
              lines.append('Checked the following README.md files:')
              lines.append('')
              for r in report:
                  lines.append(f"- {r['file']}: status={r['status']}, date={r['date']}, age_days={r['age_days']}")

          Path('staleness_report.md').write_text('\n'.join(lines), encoding='utf-8')
          print('\n'.join(lines))
          PY

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: staleness-report
          path: |
            staleness_report.md

      - name: Create or update staleness issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('staleness_report.md', 'utf8');
            const title = 'Monthly Documentation Staleness Report';
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'documentation,staleness'
            });
            let issue = issues.find(i => i.title === title);
            if (!issue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body: report,
                labels: ['documentation','staleness']
              });
            } else {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: report
              });
            }


