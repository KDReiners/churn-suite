name: Auto merge PRs to main

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, edited, labeled, unlabeled]

jobs:
  automerge:
    if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read
    steps:
      - name: Decide and merge if eligible
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;

            // Optional policy: only auto-merge PRs opened by repository owner
            if (pr.user.login !== owner) {
              core.info(`Skip: PR author ${pr.user.login} is not owner ${owner}`);
              return;
            }

            // Check combined status (legacy) and conclusion of check suites
            const ref = pr.head.sha;
            const status = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref });
            const statusOk = status.data.state === 'success' || status.data.total_count === 0;

            // Count approvals
            const reviews = await github.paginate(github.rest.pulls.listReviews, { owner, repo, pull_number: pr.number });
            const approvals = new Set(
              reviews.filter(r => r.state === 'APPROVED').map(r => r.user && r.user.login).filter(Boolean)
            );
            const approved = approvals.size >= 1;

            core.info(`statusOk=${statusOk}, approvals=${approvals.size}`);

            if (!statusOk) {
              core.info('Skip: CI not green yet.');
              return;
            }
            if (!approved) {
              core.info('Skip: No approval yet.');
              return;
            }

            // Try merge (squash)
            try {
              const res = await github.rest.pulls.merge({ owner, repo, pull_number: pr.number, merge_method: 'squash', commit_title: `auto-merge: ${pr.title} (#${pr.number})`, commit_message: 'Automatisch gemerged nach erfolgreichem CI und Approval.' });
              core.info(`Merged: ${res.data.sha}`);
            } catch (e) {
              core.warning(`Merge failed: ${e.message}`);
            }

